<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yudehai0204</title>
  <subtitle>Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-05-02T08:51:26.057Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Mr.Yu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>android 自动播放Banner</title>
    <link href="http://yoursite.com/2017/04/28/android-%E8%87%AA%E5%8A%A8%E6%92%AD%E6%94%BEBanner/"/>
    <id>http://yoursite.com/2017/04/28/android-自动播放Banner/</id>
    <published>2017-04-28T07:28:17.000Z</published>
    <updated>2017-05-02T08:51:26.057Z</updated>
    
    <content type="html"><![CDATA[<h3 id="先看一下效果图"><a href="#先看一下效果图" class="headerlink" title="先看一下效果图"></a>先看一下效果图</h3><p><img src="http://img.blog.csdn.net/20160115104236488" alt="这里写图片描述"></p>
<h4 id="支持本地图片以及网络图片or本地网络混合。"><a href="#支持本地图片以及网络图片or本地网络混合。" class="headerlink" title="支持本地图片以及网络图片or本地网络混合。"></a>支持本地图片以及网络图片or本地网络混合。</h4><a id="more"></a>
<p>使用方式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;com.jalen.autobanner.BannerView</div><div class="line">        android:id=&quot;@+id/banner&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;230dip&quot;&gt;</div><div class="line">&lt;/com.jalen.autobanner.BannerView&gt;</div></pre></td></tr></table></figure>
<p>核心的实现代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"> int length = mList.size();</div><div class="line">        View view = LayoutInflater.from(mContext).inflate(R.layout.banner_view,this,true);</div><div class="line">        LinearLayout ll = (LinearLayout) view.findViewById(R.id.ll_points);</div><div class="line">        vp= (ViewPager) view.findViewById(R.id.vp);</div><div class="line">        ll.removeAllViews();</div><div class="line">        LinearLayout.LayoutParams ll_parmas = new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);</div><div class="line">        ll_parmas.leftMargin=5;</div><div class="line">        ll_parmas.rightMargin=5;</div><div class="line">        for(int i=0;i&lt;length;i++)&#123;</div><div class="line">            ImageView img = new ImageView(mContext);</div><div class="line">            img.setLayoutParams(ll_parmas);</div><div class="line">            if(i==0)&#123;</div><div class="line">                img.setImageResource(R.mipmap.dot_focus);</div><div class="line">            &#125;else&#123;</div><div class="line">                img.setImageResource(R.mipmap.dot_blur);</div><div class="line">            &#125;</div><div class="line">            ll.addView(img);</div><div class="line">            mImgs.add(img);</div><div class="line"></div><div class="line">            final ImageView imgforview = new ImageView(mContext);</div><div class="line">            imgforview.setOnClickListener(this);</div><div class="line">            imgforview.setScaleType(ImageView.ScaleType.FIT_XY);</div><div class="line">            if(mList.get(i).getType()==0)&#123;//本地图片</div><div class="line">                imgforview.setImageResource(mList.get(i).getDrawableforint());</div><div class="line"></div><div class="line">            &#125;else&#123;//网络</div><div class="line">                Glide.with(mContext).load(mList.get(i).getDrawableforurl()).diskCacheStrategy(DiskCacheStrategy.ALL).into(imgforview);</div><div class="line">//                Glide.with(mContext).load(mList.get(i).getDrawableforurl()).listener(new RequestListener&lt;String, GlideDrawable&gt;() &#123;</div><div class="line">//                    @Override</div><div class="line">//                    public boolean onException(Exception e, String model, Target&lt;GlideDrawable&gt; target, boolean isFirstResource) &#123;</div><div class="line">//                        Log.d(&quot;yu&quot;,&quot;Faile:&quot;+e.toString());</div><div class="line">//                        return false;</div><div class="line">//                    &#125;</div><div class="line">//</div><div class="line">//                    @Override</div><div class="line">//                    public boolean onResourceReady(GlideDrawable resource, String model, Target&lt;GlideDrawable&gt; target, boolean isFromMemoryCache, boolean isFirstResource) &#123;</div><div class="line">//                            imgforview.setImageDrawable(resource);</div><div class="line">//                        return false;</div><div class="line">//                    &#125;</div><div class="line">//                &#125;).into(imgforview);</div><div class="line">//                Log.d(&quot;yu&quot;,&quot;url: &quot;+mList.get(i).getDrawableforurl());</div><div class="line">            &#125;</div><div class="line">            mViews.add(imgforview);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        vp.setAdapter(new MyAdapter());</div><div class="line">        vp.addOnPageChangeListener(onPageChange);</div></pre></td></tr></table></figure>
<p>自动轮播利用的是handler的postdelay方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">private Runnable task = new Runnable() &#123;</div><div class="line">        @Override</div><div class="line">        public void run() &#123;</div><div class="line">            if(isAuto)&#123;</div><div class="line">               currentItem = currentItem%(mViews.size());</div><div class="line">//                Log.d(&quot;yu&quot;,&quot;runalbe &quot;+currentItem);</div><div class="line">                if(currentItem==0)&#123;</div><div class="line">                    vp.setCurrentItem(currentItem,false);</div><div class="line">                &#125;else&#123;</div><div class="line">                    vp.setCurrentItem(currentItem);</div><div class="line">                &#125;</div><div class="line">                currentItem++;</div><div class="line">                mHandle.postDelayed(task,delaytime);</div><div class="line">            &#125;else&#123;</div><div class="line">                mHandle.postDelayed(task,delaytime);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure>
<p>利用isAuto判断是否正在自动轮播 如果为false 不自动切换item。isAuto赋值操作位于OnPageChangeListener的onPageScrollStateChanged方法中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"> public void onPageScrollStateChanged(int state) &#123;</div><div class="line"></div><div class="line">            switch (state)&#123;</div><div class="line">                case ViewPager.SCROLL_STATE_IDLE://用户什么都没有操作</div><div class="line">                    isAuto=true;</div><div class="line">                    currentItem = vp.getCurrentItem();</div><div class="line">//                    Log.d(&quot;yu&quot;,&quot;IDLE&quot;+currentItem);</div><div class="line">//                    if(vp.getCurrentItem()==mViews.size())&#123;</div><div class="line">//                        vp.setCurrentItem(0,false);</div><div class="line">//                    &#125;</div><div class="line">                    break;</div><div class="line">                case ViewPager.SCROLL_STATE_DRAGGING://正在滑动</div><div class="line">                    isAuto =false;</div><div class="line">                    break;</div><div class="line">                case ViewPager.SCROLL_STATE_SETTLING://滑动结束</div><div class="line">                    isAuto=true;</div><div class="line">                    break;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>当状态为SCROLL_STATE_DRAGGING时  说明用户正在操作 ，看下源码中的解释：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">    * Indicates that the pager is in an idle, settled state. The current page</div><div class="line">    * is fully in view and no animation is in progress.</div><div class="line">    */</div><div class="line">   public static final int SCROLL_STATE_IDLE = 0;</div><div class="line"></div><div class="line">   /**</div><div class="line">    * Indicates that the pager is currently being dragged by the user.</div><div class="line">    */</div><div class="line">   public static final int SCROLL_STATE_DRAGGING = 1;</div><div class="line"></div><div class="line">   /**</div><div class="line">    * Indicates that the pager is in the process of settling to a final position.</div><div class="line">    */</div><div class="line">   public static final int SCROLL_STATE_SETTLING = 2;</div></pre></td></tr></table></figure>
<p>大致意思呢就是 0代码没有任何操作。1页面正在被用户拖动。2代表成功切换至下一页面。</p>
<h3 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h3><p><a href="https://github.com/yudehai0204/autoBanner" target="_blank" rel="external">点击跳转</a></p>
<p>有问题随时欢迎Issues;</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;先看一下效果图&quot;&gt;&lt;a href=&quot;#先看一下效果图&quot; class=&quot;headerlink&quot; title=&quot;先看一下效果图&quot;&gt;&lt;/a&gt;先看一下效果图&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160115104236488&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;支持本地图片以及网络图片or本地网络混合。&quot;&gt;&lt;a href=&quot;#支持本地图片以及网络图片or本地网络混合。&quot; class=&quot;headerlink&quot; title=&quot;支持本地图片以及网络图片or本地网络混合。&quot;&gt;&lt;/a&gt;支持本地图片以及网络图片or本地网络混合。&lt;/h4&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android适配6.0，全局Dialog终极解决方案</title>
    <link href="http://yoursite.com/2017/04/28/Android%E9%80%82%E9%85%8D6-0%EF%BC%8C%E5%85%A8%E5%B1%80Dialog%E7%BB%88%E6%9E%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://yoursite.com/2017/04/28/Android适配6-0，全局Dialog终极解决方案/</id>
    <published>2017-04-28T07:18:52.000Z</published>
    <updated>2017-05-02T08:51:16.773Z</updated>
    
    <content type="html"><![CDATA[<p>6.0推出之后，部分手机完全限制了全局Toast弹出类型。so 撸主<br>(<a href="http://blog.csdn.net/a940659387/article/details/50152561" target="_blank" rel="external">http://blog.csdn.net/a940659387/article/details/50152561</a>)<br>这个文章也该光荣退休了。<br><strong>but 想要看这篇文章的童鞋应该先看撸主的前一篇文章，why?  because 你不看辣个就看不懂这个。</strong><br><a id="more"></a></p>
<h3 id="Application-ActivityLifecycleCallbacks"><a href="#Application-ActivityLifecycleCallbacks" class="headerlink" title="Application.ActivityLifecycleCallbacks"></a>Application.ActivityLifecycleCallbacks</h3><p>顾明思议，肯定是用在Application中的 。 关于不知道怎么配置Application的童鞋可自行谷歌。</p>
<p>再瞅，带着callback must 是一个接口。  没错  就是一个接口 一个在application中实现用来监听activity</p>
<p>生命周期触发步骤的东东。</p>
<h4 id="没图说个蛋蛋-先上图片"><a href="#没图说个蛋蛋-先上图片" class="headerlink" title="没图说个蛋蛋 先上图片"></a>没图说个蛋蛋 先上图片</h4><p><img src="http://img.blog.csdn.net/20160909141533953" alt="这里写图片描述"></p>
<h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">  public void onActivityCreated(Activity activity, Bundle savedInstanceState) &#123;</div><div class="line">      if(activity.getParent()!=null)&#123;</div><div class="line">          NewContext = activity.getParent();</div><div class="line">      &#125;else</div><div class="line">          NewContext = activity;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @Override</div><div class="line">  public void onActivityStarted(Activity activity) &#123;</div><div class="line">      if(activity.getParent()!=null)&#123;</div><div class="line">          NewContext = activity.getParent();</div><div class="line">      &#125;else</div><div class="line">          NewContext = activity;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @Override</div><div class="line">  public void onActivityResumed(Activity activity) &#123;</div><div class="line">      if(activity.getParent()!=null)&#123;</div><div class="line">          NewContext = activity.getParent();</div><div class="line">      &#125;else</div><div class="line">          NewContext = activity;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @Override</div><div class="line">  public void onActivityPaused(Activity activity) &#123;</div><div class="line">          ToastUtils.getInstanse().cancel();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @Override</div><div class="line">  public void onActivityStopped(Activity activity) &#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @Override</div><div class="line">  public void onActivitySaveInstanceState(Activity activity, Bundle outState) &#123;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @Override</div><div class="line">  public void onActivityDestroyed(Activity activity) &#123;</div><div class="line"></div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>这个NewContext 就是我们的主要东东 记录当前用户停留在哪一个页面 。简单来说就是记录dialog弹出时</p>
<p>应该依赖那个activity.</p>
<p>soso 为了适配新方法 我们在全局的service中也做了一些小小的改动哦 。不懂怎么写一个全局弹出</p>
<p>dialog的service的童鞋请看这个文章；<br>[<a href="http://blog.csdn.net/a940659387/article/details/50152561" target="_blank" rel="external">http://blog.csdn.net/a940659387/article/details/50152561</a>]</p>
<p>本撸主还是粘出代码供your 一览吧。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div></pre></td><td class="code"><pre><div class="line">public class CommonDialogService extends Service implements CommonDialogListener&#123;</div><div class="line">	@Override</div><div class="line">	public IBinder onBind(Intent intent) &#123;</div><div class="line">		return null;</div><div class="line">	&#125;</div><div class="line">	/**this is TV*/</div><div class="line">	private static TextView tv;</div><div class="line">	private static Dialog dialog;</div><div class="line">	/**判断是否已经new Dialog*/</div><div class="line">	private void showDialog(int iscancle)&#123;</div><div class="line"></div><div class="line">		if(dialog==null)&#123;</div><div class="line">		dialog = new Dialog(CommonApplication.NewContext, R.style.MyDialogStyle);</div><div class="line">		View view = LayoutInflater.from(this).inflate(R.layout.progressbar_item,</div><div class="line">				null);</div><div class="line">		dialog.setContentView(view);</div><div class="line">		tv = (TextView) view.findViewById(R.id.mylaodint_text_id);</div><div class="line">		ImageView progressImageView = (ImageView) view</div><div class="line">				.findViewById(R.id.myloading_image_id);</div><div class="line">		AnimationDrawable animationDrawable = (AnimationDrawable) progressImageView</div><div class="line">				.getDrawable();</div><div class="line">		animationDrawable.start();</div><div class="line">//		WindowManager.LayoutParams windows = dialog.getWindow().getAttributes();</div><div class="line">//			windows.type=WindowManager.LayoutParams.TYPE_TOAST;</div><div class="line">//			dialog.getWindow().setAttributes(windows);</div><div class="line">//		dialog.getWindow().setType(WindowManager.LayoutParams.TYPE_TOAST);</div><div class="line">			if(iscancle==1)&#123;</div><div class="line">				dialog.setCanceledOnTouchOutside(true);</div><div class="line">			&#125;else&#123;</div><div class="line">				dialog.setCanceledOnTouchOutside(false);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			dialog.setOnKeyListener(new DialogInterface.OnKeyListener() &#123;</div><div class="line">				@Override</div><div class="line">				public boolean onKey(DialogInterface dialog, int keyCode, KeyEvent event) &#123;</div><div class="line">					dialog.dismiss();</div><div class="line">					dialog=null;</div><div class="line">					return false;</div><div class="line">				&#125;</div><div class="line">			&#125;);</div><div class="line">			dialog.setOnDismissListener(new DialogInterface.OnDismissListener() &#123;</div><div class="line">				@Override</div><div class="line">				public void onDismiss(DialogInterface dialog) &#123;</div><div class="line">					dialog =null;</div><div class="line">				&#125;</div><div class="line">			&#125;);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		if(dialog!=null&amp;&amp;!dialog.isShowing())&#123;</div><div class="line">			dialog.show();</div><div class="line">			WindowManager.LayoutParams lp = dialog.getWindow()</div><div class="line">					.getAttributes();</div><div class="line">			lp.width = ConstantsYiBaiSong.WinWidth/ 3;</div><div class="line">			lp.height = LayoutParams.WRAP_CONTENT;</div><div class="line">			dialog.getWindow().setAttributes(lp);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	</div><div class="line">	public void onCreate() &#123;</div><div class="line">		/**this将此service与工具类绑定*/</div><div class="line">		ToastUtils.getInstanse().setListener(this);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	</div><div class="line">	/**showDialog*/</div><div class="line">	@Override</div><div class="line">	public void show() &#123;</div><div class="line">		showDialog(1);</div><div class="line">		dialog.setCancelable(true);</div><div class="line">		tv.setText(&quot;请稍后...&quot;);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	/**cancleDialog*/</div><div class="line">	@Override</div><div class="line">	public void cancle() &#123;</div><div class="line">		if(null!=dialog)&#123;</div><div class="line">			dialog.dismiss();</div><div class="line">			dialog = null;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	/**show have custom Text dialog*/</div><div class="line">	@Override</div><div class="line">	public void showstr(String str) &#123;</div><div class="line">		showDialog(1);</div><div class="line">		dialog.setCancelable(true);</div><div class="line">		tv.setText(str);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	/**show uncancle&apos;s dialog */</div><div class="line">	@Override</div><div class="line">	public void showunCancle() &#123;</div><div class="line">		showDialog(2);</div><div class="line">		dialog.setCanceledOnTouchOutside(false);</div><div class="line">		dialog.setCancelable(false);</div><div class="line">		tv.setText(&quot;请稍后...&quot;);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void setStr(String str) &#123;</div><div class="line">		if(dialog==null)&#123;</div><div class="line">			return;</div><div class="line">		&#125;</div><div class="line">		if(dialog.isShowing())&#123;</div><div class="line">//			Log.e(&quot;TAG&quot;, &quot;str====:&quot; + str);</div><div class="line">			tv.setText(str+&quot;&quot;);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void showDismissListener(final ToastUtils.DisMisCallBack callBack) &#123;</div><div class="line">		if(CommonApplication.NewContext!=null&amp;&amp;dialog==null)&#123;</div><div class="line">			dialog = new Dialog(CommonApplication.NewContext, R.style.MyDialogStyle);</div><div class="line">			View view = LayoutInflater.from(this).inflate(R.layout.progressbar_item,</div><div class="line">					null);</div><div class="line">			dialog.setContentView(view);</div><div class="line"></div><div class="line">			tv = (TextView) view.findViewById(R.id.mylaodint_text_id);</div><div class="line">			ImageView progressImageView = (ImageView) view</div><div class="line">					.findViewById(R.id.myloading_image_id);</div><div class="line"></div><div class="line">			AnimationDrawable animationDrawable = (AnimationDrawable) progressImageView</div><div class="line">					.getDrawable();</div><div class="line">			animationDrawable.start();</div><div class="line">			dialog.setOnDismissListener(new DialogInterface.OnDismissListener() &#123;</div><div class="line">				@Override</div><div class="line">				public void onDismiss(DialogInterface dialog) &#123;</div><div class="line">					callBack.disMisCallBack();</div><div class="line">				&#125;&#125;);</div><div class="line">//		WindowManager.LayoutParams windows = dialog.getWindow().getAttributes();</div><div class="line">//			windows.type=WindowManager.LayoutParams.TYPE_TOAST;</div><div class="line">//			dialog.getWindow().setAttributes(windows);</div><div class="line">//		dialog.getWindow().setType(WindowManager.LayoutParams.TYPE_TOAST);</div><div class="line">//			if(iscancle==1)&#123;</div><div class="line">//				dialog.setCanceledOnTouchOutside(true);</div><div class="line">//			&#125;else&#123;</div><div class="line">//				dialog.setCanceledOnTouchOutside(false);</div><div class="line">//			&#125;</div><div class="line">		&#125;</div><div class="line">		dialog.setCanceledOnTouchOutside(false);</div><div class="line">		if(dialog!=null&amp;&amp;!dialog.isShowing())&#123;</div><div class="line">			dialog.show();</div><div class="line">			WindowManager.LayoutParams lp = dialog.getWindow()</div><div class="line">					.getAttributes();</div><div class="line">			lp.width = ConstantsYiBaiSong.WinWidth/ 3;</div><div class="line">			lp.height = LayoutParams.WRAP_CONTENT;</div><div class="line">			dialog.getWindow().setAttributes(lp);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void onDestroy() &#123;</div><div class="line">		super.onDestroy();</div><div class="line">		if(null!=dialog &amp;&amp;dialog.isShowing())&#123;</div><div class="line">			dialog.cancel();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>细心的童鞋可能已经发现 有些代码已经被注释了  。  因为么 不注释 6.0就会啪啪啪一直蹦。 you know .</p>
<p>话到这里  撸主已经没有太多的话想说了。so女生压底图一张，然后上demo;</p>
<p><img src="http://img.blog.csdn.net/20160909141659424" alt="这里写图片描述"></p>
<p>git地址：<a href="https://github.com/yudehai0204/ApplicationDialog" target="_blank" rel="external">全局Dialog适配6.0</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;6.0推出之后，部分手机完全限制了全局Toast弹出类型。so 撸主&lt;br&gt;(&lt;a href=&quot;http://blog.csdn.net/a940659387/article/details/50152561&quot;&gt;http://blog.csdn.net/a940659387/article/details/50152561&lt;/a&gt;)&lt;br&gt;这个文章也该光荣退休了。&lt;br&gt;&lt;strong&gt;but 想要看这篇文章的童鞋应该先看撸主的前一篇文章，why?  because 你不看辣个就看不懂这个。&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Activity销毁时如何保存Fragment状态</title>
    <link href="http://yoursite.com/2017/04/25/Activity%E9%94%80%E6%AF%81%E6%97%B6%E5%A6%82%E4%BD%95%E4%BF%9D%E5%AD%98Fragment%E7%8A%B6%E6%80%81/"/>
    <id>http://yoursite.com/2017/04/25/Activity销毁时如何保存Fragment状态/</id>
    <published>2017-04-25T11:25:23.000Z</published>
    <updated>2017-05-02T08:51:04.937Z</updated>
    
    <content type="html"><![CDATA[<p>转载请标明出处：<br><a href="http://blog.csdn.net/a940659387/article/details/50730076" target="_blank" rel="external">http://blog.csdn.net/a940659387/article/details/50730076</a></p>
<p>原文：<a href="http://emuneee.com/blog/2013/01/07/saving-fragment-states/" target="_blank" rel="external">http://emuneee.com/blog/2013/01/07/saving-fragment-states/</a><br>在Android 3.0(SDK 11)以后，Android 出现了一个伟大的功能：如何在你的App中保存和还原你的Framgent数据。<br><a id="more"></a></p>
<h3 id="它是什么"><a href="#它是什么" class="headerlink" title="它是什么"></a>它是什么</h3><pre><code>我再我下一个App开发中期的时候参考Android API时,偶然发现  FragmentManager.putFragment(Bundle, String, Fragment) and FragmentManager.getFragment(Bundle, String) 这两个方法。它们的作用？

putFragment
</code></pre><p>将一个Fragment的引用传递到Bundle中。这个Bundle可以一直保存它的数据，以后通过调用<br>    <a href="http://developer.android.com/reference/android/app/FragmentManager.html#getFragment%28android.os.Bundle,%20java.lang.String%29" target="_blank" rel="external">getFragment(Bundle, String)</a>方法得到一个一样的Fragmet 实例。</p>
<pre><code>getFragment
</code></pre><p>取回一个先前通过 <a href="http://developer.android.com/reference/android/app/FragmentManager.html#putFragment%28android.os.Bundle,%20java.lang.String,%20android.app.Fragment%29" target="_blank" rel="external">putFragment(Bundle, String, Fragment)</a>.方法存储的fragment实例。</p>
<pre><code>根据我的理解，当你把当前的Fragment放置到bundle中，他会保存一个的指针指向这个fragment的地址;当你调用getFragment()方法时，它将返回你通过putFragment保存的指针对应的Fragment实例。
</code></pre><p>你也可以通过使用FramgentManager APIs 去保存一个fragment 对应的指针（我感觉叫引用更好） 到bundle中 在以后用到时取出。它也允许你实现这个指针的存储跟取出（还原）。 </p>
<pre><code>---Diane Hackborn ,Android 架构师。  [Source](https://groups.google.com/forum/?fromgroups=#!topic/android-developers/NBlMJnMaGbo)
</code></pre><h3 id="如何去使用它"><a href="#如何去使用它" class="headerlink" title="如何去使用它"></a>如何去使用它</h3><p>一个使用这个API的方法是在我的这个Acticity的创建和销毁的时候。自fragment出现以来，我通常用两个Activity来使用它，一个是我的activity,另一个用来设置Fragment。我再我的activity中管理fragment.</p>
<p><strong>putFragment</strong></p>
<pre><code>在activity的 onSaveInstanceState 像这样使用：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">@Override</div><div class="line">protected void onSaveInstanceState(Bundle outState) &#123;</div><div class="line">   FragmentManager manager = getFragmentManager();</div><div class="line">   manager.putFragment(outState, MyFragment.TAG, mMyFragment);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>MyFragment 是一个在我应用中创建的Fragment，这个bundle,outState,只是一个简单的bunlde,它将存储你fragment(即MyFragment)对应的引用（指针）。 MyFragment.TAG 是你的fragment指针以后会用到的key值。</p>
<p><strong>GetFragment</strong></p>
<p>我有一个自定义方法（instantiateFragments） ，它会做一到两件事情：当我的应用是冷启动时抓取我的fragment实例 或者 获得现在的MyFragment内容。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">private void instantiateFragments(Bundle inState) &#123;</div><div class="line">   FragmentManager manager = getFragmentManager();</div><div class="line">   FragmentTransaction transaction = manager.beginTransaction();</div><div class="line"></div><div class="line">   if (inState != null) &#123;</div><div class="line">      mMyFragment = (MyFragment) manager.getFragment(inState, MyFragment.TAG);</div><div class="line">   &#125; else &#123;</div><div class="line">      mMyFragment = new MyFragment();</div><div class="line">      transaction.add(R.id.fragment, mMyFragment, MyFragment.TAG);</div><div class="line">      transaction.commit();</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我在我的activity中调用instantiateFragments 这个方法，onRestoreInstanceState传入的参数为null时（onCreate 方法通过冷启动触发），当通过热启动触发时，传入的参数为bundle.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected void onRestoreInstanceState(Bundle inState) &#123;</div><div class="line">   instantiateFragments(inState);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当用户旋转设备时，Android 将销毁Activity,并在销毁前触发onSaveInstanceState，允许开发者来<br>保存数据。一旦activity被重新启动，这个OS 将触发onRestoreInstanceState 恢复开发者旋转前的保存的状态。</p>
<p>我鼓励你继续更深调查Android框架。因为所有类型都有细微的差别,他们将简化Android应用程序开发工作。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载请标明出处：&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/a940659387/article/details/50730076&quot;&gt;http://blog.csdn.net/a940659387/article/details/50730076&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原文：&lt;a href=&quot;http://emuneee.com/blog/2013/01/07/saving-fragment-states/&quot;&gt;http://emuneee.com/blog/2013/01/07/saving-fragment-states/&lt;/a&gt;&lt;br&gt;在Android 3.0(SDK 11)以后，Android 出现了一个伟大的功能：如何在你的App中保存和还原你的Framgent数据。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/04/25/hello-world/"/>
    <id>http://yoursite.com/2017/04/25/hello-world/</id>
    <published>2017-04-25T07:01:00.530Z</published>
    <updated>2017-05-02T08:51:33.893Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
